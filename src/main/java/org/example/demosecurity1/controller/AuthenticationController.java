package org.example.demosecurity1.controller;

import org.example.demosecurity1.entity.User;
import org.example.demosecurity1.service.QRCodeService;
import org.example.demosecurity1.service.TwoFactorAuthenticationService;
import org.example.demosecurity1.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
public class AuthenticationController {

    @Autowired
    private TwoFactorAuthenticationService twoFactorAuthenticationService;

    @Autowired
    private QRCodeService qrCodeService;

    @Autowired
    private UserService userService;

    @PostMapping("/register")
    public String register(@RequestParam String username) {
        // Generate a secret key for the user
        String secretKey = twoFactorAuthenticationService.generateSecretKey();

        // Generate the QR code URL that the user will scan
        String qrCodeUrl = twoFactorAuthenticationService.generateQRCodeUrl(username, secretKey);

        // Optionally, generate the QR code image here to return to the user
        // byte[] qrCodeImage = qrCodeService.generateQRCodeImage(qrCodeUrl);

        return "Secret Key: " + secretKey + ", QR Code URL: " + qrCodeUrl;
    }

    @PostMapping("/authenticate")
    public String authenticate(@RequestParam String username, @RequestParam String password) {
        // Normally, authenticate the username and password using your own authentication logic
        // For this example, assume the user is authenticated
        return "Please enter the OTP generated by your Google Authenticator app.";
    }

//    @PostMapping("/verify-otp")
//    public String verifyOtp(@RequestParam String secretKey, @RequestParam int otp) {
//        // Verify the OTP entered by the user
//        boolean isOtpValid = twoFactorAuthenticationService.verifyCode(secretKey, otp);
//
//        if (isOtpValid) {
//            return "OTP verified successfully! User authenticated.";
//        } else {
//            return "Invalid OTP!";
//        }
//    }

    @PostMapping("/verify-otp")
    public ResponseEntity<String> verifyOTP(@RequestParam String username, @RequestParam int otp) {
        // Retrieve the secret key from your database (should be saved when user registers)
        // Example: Retrieve from DB
        User user = userService.getUserByUsername(username);
        String secretKey = user.getSecretKey();

        boolean isVerified = twoFactorAuthenticationService.verifyCode(secretKey, otp);
        if (isVerified) {
            return ResponseEntity.ok("OTP Verified Successfully!");
        } else {
            return ResponseEntity.status(400).body("Invalid OTP");
        }
    }

    @PostMapping("/register-two-factor")
    public ResponseEntity<byte[]> registerTwoFactor(@RequestParam String username) throws Exception {
        // Step 1: Generate a secret key for the user
        String secretKey = twoFactorAuthenticationService.generateSecretKey();
        User user = userService.getUserByUsername(username);
        user.setSecretKey(secretKey);
        userService.saveUser(user);

        // Step 2: Generate the QR code URL
        String qrCodeUrl = twoFactorAuthenticationService.generateQRCodeUrl(username, secretKey);

        // Step 3: Generate the QR code image from the URL
        byte[] qrCodeImage = qrCodeService.generateQRCodeImage(qrCodeUrl);

        // Step 4: Set the response headers and content type to return the image inline
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.IMAGE_PNG); // Set content type to image
        headers.setContentDispositionFormData("inline", "qr_code.png"); // Suggest displaying inline with filename

        // Return the image as a byte array with appropriate headers
        return ResponseEntity.ok()
                .headers(headers)
                .body(qrCodeImage); // Return the image data as the response body
    }
}

